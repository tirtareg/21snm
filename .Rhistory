data[data$Species == "virginica",] <- "matamu"
replace(data$Species, "virginica", "matamu")
library(plyr)
revalue(data$Species, c("virginica"="matamu"))
str(data)
data$Species <- as.character(data$Species)
replace(data$Species, "virginica", "matamu")
str(data)
recode_factor(data$Species, "virginica" = "matamu")
daata<-iris
recode_factor(data$Species, "virginica" = "matamu")
f <- as.factor(c("a", "b", "c"))
f
f <- as.factor(c("a", "b", "c", "a", "b", "c", "a", "b", "c"))
f
recode_factor(f, "a" = "x", "b" = "y")
f <- data$Species
f
data <- iris
f <- data$Species
recode_factor(f, "virginica" = "anu")
data <- iris
data$Species <- recode_factor(data$Species, "virginica" = "anu")
data
data$Species <- recode_factor(data$Species, "anu" = "matamu")
data
str(data)
data$Species <- as.character(data$Species)
data$Species <- recode_factor(data$Species, "matamu" = "anu")
data
str(data)
knitr::opts_chunk$set(echo = TRUE)
train <- read.csv("G:/My Drive/Dian/BRI HACKATON/train.csv")
test <- read.csv("G:/My Drive/Dian/BRI HACKATON/test.csv")
str(train)
summary(train)
dim(train)
dim(test)
dim(unique(train))
dim(unique(test))
summary(train)
unique(train$achievement_target_1)
names(train)
summary(train)
train <- mutate_if(train, is.character, as.factor)
library(tidyverse)
library(caret)
library(riv)
library(Information)
train <- mutate_if(train, is.character, as.factor)
test <- mutate_if(test, is.character, as.factor)
train <- train %>% mutate_all(na_if, "")
train <- droplevels(train)
test <- droplevels(test)
summary(train$year_graduated)
unique(train$year_graduated)
table(train$Best.Performance)
names(train)
train$Best.Performance <- factor(train$Best.Performance,
levels = c(0,1),
labels = c("not_reached", "reached"))
round(prop.table(table(train$Best.Performance))*100, 0)
a <- colSums(is.na(train))
b <- seq(1,length(a))
d <- round(colSums(is.na(train))/nrow(train)*100, 2)
c <- data.frame(peubah = b, banyaknya_NA = a, persen_NA = d)
arrange(c, desc(persen_NA))
train1 <- train[complete.cases(train), ]
test1 <- test
dim(train1)
table(train1$Best.Performance)
round(prop.table(table(train1$Best.Performance)) * 100, 0)
tipe <- NULL
nama <- NULL
for (i in (1 : (ncol(train1) - 1))) {
tipe[i] <- class(train1[, i])
nama[i] <- names(train1)[i]
}
data.frame(nama = nama, var = 1 : (ncol(train1) - 1), tipe = tipe)
# peubah numerik (2, 4, 5, 9, 11:13, 15:25)
sort(unique(train1[, 2]))  #numeric   job_duration_in_current_job_level
sort(unique(train1[, 4]))  #numeric   job_duration_in_current_person_level
sort(unique(train1[, 5]))  #numeric   job_duration_in_current_branch
sort(unique(train1[, 9]))  #numeric   age (kelompokkan)
sort(unique(train1[, 8])) #numeric   number_of_dependences (kelompokkan)
sort(unique(train1[, 10])) #numeric   number_of_dependences..male. (kelompokkan)
sort(unique(train1[, 12])) #numeric   number_of_dependences..female. (kelompokkan)
sort(unique(train1[, 10])) #numeric   number_of_dependences..male. (kelompokkan)
sort(unique(train1[, 12])) #numeric   number_of_dependences..female. (kelompokkan)
sort(unique(train1[, 13])) #numeric   GPA (margin too large)
sort(unique(train1[, 14])) #numeric   job_duration_as_permanent_worker (kelompokkan)
sort(unique(train1[, 15])) #numeric   job_duration_from_training (kelompokkan)
sort(unique(train1[, 16])) #numeric   branch_rotation (kelompokkan)
sort(unique(train1[, 17])) #numeric   job_rotation (kelompokkan)
sort(unique(train1[, 18])) #numeric   assign_of_otherposition (kelompokkan)
sort(unique(train1[, 19])) #numeric   annual.leave (kelompokkan)
sort(unique(train1[, 20])) #numeric   sick_leaves (kelompokkan)
sort(unique(train1[, 21])) #numeric   Avg_achievement_.
sort(unique(train1[, 22])) #numeric   Last_achievement_.
library(skimr)
skimmed <- skim(train1[, c(2, 4, 5, 9, 11, 12, 13, 15:24)])
library(skimr)
skimmed <- skim(train1[, c(2, 4, 5, 9, 11, 12, 13, 15)])
skimmed <- skimmed[, c(2,5,7,8,9,10,11)]
names(skimmed) <- c("Peubah","Mean","Min","Q1","Q2","Q3","Max")
skimmed
featurePlot(x = train1[, c(2, 4, 5, 15)],
y = train1[, 29],
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = train1[, c(2, 4, 5, 15)],
y = train1[, 22],
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
summary(train1)
ls()
### menjalankan algoritma SMOTE
library(DMwR)
set.seed(1000)
latih <- SMOTE(Best.Performance ~ ., data = train1, k = 5,
perc.over = 200, perc.under = 200)
# Feature Selection using Recursive Feature Elimination
ctrl <- rfeControl(functions = rfFuncs,
method = "cv",
verbose = FALSE)
lmProfile <- rfe(x=latih[, -ncol(latih)], y=latih$Best.Performance,
rfeControl = ctrl)
lmProfile
# Performing Random Forest
Control <- trainControl(method = "cv",
number = 5)
smote_rf <- train(Best.Performance ~ ., data = latih,
trCtrl = Control,
method = "rf")
smote_rf
# Performing Logistic Regression
Control <- trainControl(method = "cv",
number = 5)
smote_logit <- train(Best.Performance ~.,
data = latih,
method = "glmnet",
trControl = Control)
smote_logit
# Performing Logistic Regression
Control <- trainControl(method = "cv",
number = 5)
# Training neural net
smote_nn <- train(Best.Performance ~ .,
data = latih,
trControl = Control, method = "nnet")
smote_nn
reticulate::repl_python()
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from imblearn.pipeline import Pipeline
from sklearn.model_selection import cross_val_score
import warnings
warnings.filterwarnings('ignore')
quit()
exit()
exit
update.packages(ask = F, checkBuilt = T)
library(readxl)
library(tidyverse)
path <- "G:/My Drive/# REGISTRASI DAN STATISTIK/DATA KHS/KHS.xlsx"
sheets <- excel_sheets(path)
sheets
db <- map_dfr(sheets, ~read_excel(path = path,
sheet = .x))
names(db)
dim(db)
str(db)
db %>%
group_by(Semester) %>%
summarise(mhs = n())
a <- db %>%
group_by(Semester) %>%
summarise(mhs = length(unique(NIM)))
b <- db %>%
filter(complete.cases(.)) %>%
group_by(Semester) %>%
summarise(anu = n())
left_join(a, b) %>%
mutate(no_ipk = mhs - anu)
db %>%
filter(!complete.cases(.)) %>%
group_by(Semester) %>%
summarise(anu = n())
sum(!complete.cases(db)) +
sum(complete.cases(db)) - nrow(db)
update.packages(ask = F, checkBuilt = T)
library(readxl)
library(tidyverse)
path <- "G:/My Drive/# REGISTRASI DAN STATISTIK/DATA KHS/KHS.xlsx"
sheets <- excel_sheets(path)
sheets
db <- map_dfr(sheets, ~read_excel(path = path,
sheet = .x))
names(db)
dim(db)
str(db)
db %>%
group_by(Semester) %>%
summarise(mhs = n())
a <- db %>%
group_by(Semester) %>%
summarise(mhs = length(unique(NIM)))
b <- db %>%
filter(complete.cases(.)) %>%
group_by(Semester) %>%
summarise(anu = n())
left_join(a, b) %>%
mutate(no_ipk = mhs - anu)
data.matrix(pelanggan[c("Jenis.Kelamin", "Profesi")])
#Bagian Data Preparation
pelanggan <- read.csv("https://storage.googleapis.com/dqlab-dataset/customer_segments.txt", sep="\t")
pelanggan_matrix <- data.matrix(pelanggan[c("Jenis.Kelamin", "Profesi", "Tipe.Residen")])
pelanggan <- data.frame(pelanggan, pelanggan_matrix)
Profesi <- unique(pelanggan[c("Profesi","Profesi.1")])
Jenis.Kelamin <- unique(pelanggan[c("Jenis.Kelamin","Jenis.Kelamin.1")])
Tipe.Profesi <- unique(pelanggan[c("Tipe.Residen","Tipe.Residen.1")])
pelanggan$NilaiBelanjaSetahun <- pelanggan$NilaiBelanjaSetahun/1000000
field_yang_digunakan = c("Jenis.Kelamin.1", "Umur", "Profesi.1", "Tipe.Residen.1","NilaiBelanjaSetahun")
#Membandingkan dengan 2 cluster kmeans, masing-masing 2 dan 5
set.seed(100)
kmeans(x=pelanggan[field_yang_digunakan], centers=2, nstart=25)
set.seed(100)
kmeans(x=pelanggan[field_yang_digunakan], centers=5, nstart=25)
a <- kmeans(x=pelanggan[field_yang_digunakan], centers=2, nstart=25)
a
a
a[1]
a[2]
a[3]
a[4]
a[5]
a[6]
a[7]
a[8]
a[8]
a[9]
a$centers
create name.csv
setwd("G:/My Drive/#PMB/2021/01_SNMPTN/21snm")
library(readxl)
db <- read_excel("snmptn.xlsx")
library(tidyverse)
data <- db %>%
group_by(provinsi, jk) %>%
summarize(tot = n())
data <- data %>%
pivot_wider(names_from = jk, values_from = tot)
data
data[is.na(data)] <- 0
data <- adorn_totals(data, where = "col", name = "JML")
library(janitor)
library(kableExtra)
data <- adorn_totals(data, where = "col", name = "JML")
data <- arrange(data, desc(JML))
data <- adorn_totals(data, where = "row", name = "JML")
names(data) <- c("Provinsi", "Laki-Laki", "Perempuan", "JML")
data
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data <- data[, -1]
data
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
pers_lulus = round(lulus/pendaftar * 100, 0),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
pers_lulus = round(lulus/pendaftar * 100, 0),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data <- data[, -1]
data <- adorn_totals(data,where = "row", name = "Total")
data$pers_sudah <- round(data$sudah / data$lulus * 100, 0)
data$pers_belum <- round(data$belum / data$lulus * 100, 0)
data <- data[,c(1:5,7, 8, 6)]
data
names(data)
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
pers_lulus = round(lulus/pendaftar * 100, 0),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data <- data[, -1]
data <- adorn_totals(data,where = "row", name = "Total")
data$pers_sudah <- round(data$sudah / data$lulus * 100, 0)
data$pers_belum <- round(data$belum / data$lulus * 100, 0)
data <- data[,c(1:6,8, 9, 7)]
names(data)
names(data) <- c("Fakultas/Program Studi", "Peminat", "Lulus", "% Lulus", "Ya", "Tidak", "Ya (%)", "Tidak (%)", "Diterima")
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 4, "Registrasi" = 4, " " = 1)) %>%
pack_rows("Hukum", 1, 1, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Keguruan dan Ilmu Pendidikan", 2, 19, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Teknik", 20, 25, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pertanian", 26, 29, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ekonomi dan Bisnis", 30, 33, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ilmu Sosial dan Ilmu Politik", 34, 36, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Kedokteran", 37, 39, label_row_css = "background-color: #666; color: #fff;")
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data <- data %>%
group_by(fakultas) %>%
summarize(pendaftar = sum(pendaftar),
lulus = sum(lulus),
pers_lulus = round(lulus/pendaftar * 100, 0),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data
data <- adorn_totals(data, where = "row", name = "Total")
data
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data <- data %>%
group_by(fakultas) %>%
summarize(pendaftar = sum(pendaftar),
lulus = sum(lulus),
pers_lulus = round(lulus/pendaftar * 100, 0),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data$fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian",
"FEB", "FISIP", "Kedokteran")
data$fakultas  <- factor(data$fakultas, levels = data[["fakultas"]])
plot_ly(data, x = ~fakultas, y = ~lulus, type = "bar", name = "Total") %>%
add_trace(y = ~sudah, name = "registrasi") %>%
add_trace(y = ~diterima, name = "diterima") %>%
layout(
title = "",
yaxis = list(title = ""),
xaxis = list(title = "Fakultas"),
hovermode = "compare"
)
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data <- data %>%
group_by(fakultas) %>%
summarize(pendaftar = sum(pendaftar),
lulus = sum(lulus),
pers_lulus = round(lulus/pendaftar * 100, 0),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data$fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian",
"FEB", "FISIP", "Kedokteran")
data$fakultas  <- factor(data$fakultas, levels = data[["fakultas"]])
plot_ly(data, x = ~fakultas, y = ~lulus, type = "bar", name = "Total") %>%
add_trace(y = ~sudah, name = "registrasi") %>%
add_trace(y = ~diterima, name = "diterima") %>%
layout(
title = "",
yaxis = list(title = ""),
xaxis = list(title = "Fakultas"),
hovermode = "compare"
)
library(plotly)
library(shiny)
plot_ly(data, x = ~fakultas, y = ~lulus, type = "bar", name = "Total") %>%
add_trace(y = ~sudah, name = "registrasi") %>%
add_trace(y = ~diterima, name = "diterima") %>%
layout(
title = "",
yaxis = list(title = ""),
xaxis = list(title = "Fakultas"),
hovermode = "compare"
)
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data
data <- data %>%
group_by(fakultas) %>%
summarize(pendaftar = sum(pendaftar),
lulus = sum(lulus),
pers_lulus = round(lulus/pendaftar * 100, 0),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data
data$fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian",
"FEB", "FISIP", "Kedokteran")
data$fakultas  <- factor(data$fakultas, levels = data[["fakultas"]])
data
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data <- data %>%
group_by(fakultas) %>%
summarize(pendaftar = sum(pendaftar),
lulus = sum(lulus),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data$fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian",
"FEB", "FISIP", "Kedokteran")
data$fakultas  <- factor(data$fakultas, levels = data[["fakultas"]])
data <- adorn_totals(data, where = "row", name = "Total")
data
data$pers_sudah <- round(data$sudah / data$lulus * 100, 0)
data$pers_belum <- round(data$belum / data$lulus * 100, 0)
data
data$pers_lulus <- round(data$lulus / data$pendaftar * 100, 0)
data
data <- data[,c(1:3, 9, 4, 5, 7, 8, 6)]
names(data) <- c("Fakultas", "Peminat", "Lulus", "% Lulus","Ya", "Tidak", "Ya (%)", "Tidak (%)", "Diterima")
kable(data) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 4, "Registrasi" = 4, " " = 1))
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
pers_lulus = round(lulus/pendaftar * 100, 0),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
sudah = sum(registrasi == "registrasi", na.rm = T),
belum = lulus - sudah,
diterima = sum(nim == "diterima", na.rm = T))
data <- data[, -1]
data <- adorn_totals(data,where = "row", name = "Total")
data$pers_sudah <- round(data$sudah / data$lulus * 100, 0)
data$pers_belum <- round(data$belum / data$lulus * 100, 0)
data$pers_lulus <- round(data$lulus / data$pendaftar * 100, 0)
names(data)
data <- data[,c(1:3, 9, 4, 5, 7, 8, 6)]
names(data)
names(data) <- c("Fakultas/Program Studi", "Peminat", "Lulus", "% Lulus", "Ya", "Tidak", "Ya (%)", "Tidak (%)", "Diterima")
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 4, "Registrasi" = 4, " " = 1)) %>%
pack_rows("Hukum", 1, 1, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Keguruan dan Ilmu Pendidikan", 2, 19, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Teknik", 20, 26, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pertanian", 27, 30, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ekonomi dan Bisnis", 31, 34, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ilmu Sosial dan Ilmu Politik", 35, 37, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Kedokteran", 38, 41, label_row_css = "background-color: #666; color: #fff;")
setwd("G:/My Drive/#PMB/2021/01_SNMPTN/21snm")
setwd("G:/My Drive/#PMB/2021/01_SNMPTN/21snm")
loadfonts(dev="win")
windowsFonts()
library(extrafont)
extrafont::font_import()
library(lubridate)
glimpse(iris)
dplyr::glimpse(iris)
library(dplyr)
?lag
lag(1:5)
lag(1:5, 2)
setwd("G:/My Drive/#PMB/2021/01_SNMPTN/21snm")
setwd("G:/My Drive/#PMB/2021/01_SNMPTN/21snm")
